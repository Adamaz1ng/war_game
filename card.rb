# -*- coding: utf-8 -*-

# DO NOT EDIT THIS FILE!

# Represents a playing card.
class Card
  SUIT_STRINGS = {
    clubs: '♣',
    diamonds: '♦',
    hearts: '♥',
    spades: '♠'
  }

  VALUE_STRINGS = {
    deuce: '2',
    three: '3',
    four: '4',
    five: '5',
    six: '6',
    seven: '7',
    eight: '8',
    nine: '9',
    ten: '10',
    jack: 'J',
    queen: 'Q',
    king: 'K',
    ace: 'A'
  }

  CARD_RANKS = {
    deuce: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6,
    seven: 7,
    eight: 8,
    nine: 9,
    ten: 10,
    jack: 11,
    queen: 12,
    king: 13,
    ace: 12
  }

  def card_ranking
    CARD_RANKS[self.value]
  end

  # Returns an array of all suits.
  def self.suits
    SUIT_STRINGS.keys
  end

  # Returns an array of all values.
  def self.values
    VALUE_STRINGS.keys
  end

  attr_reader :suit, :value
  attr_accessor :face_up

  def initialize(suit, value, face_up = false)
    unless Card.suits.include?(suit) && Card.values.include?(value)
      fail "illegal suit (#{suit}) or value (#{value})"
    end

    @suit, @value, @face_up = suit, value, face_up
  end

  # Compares two cards to see if they're equal in suit & value.
  def ==(other)
    return false if other.nil?

    [:suit, :value].all? do |attr|
      send(attr) == other.send(attr)
    end
  end

  def to_s
    VALUE_STRINGS[value] + SUIT_STRINGS[suit]
  end

  def switch_face
    if self.face_up == false
      self.face_up = true
      return self
    else
      self.face_up = false
      return self
    end
  end

end
